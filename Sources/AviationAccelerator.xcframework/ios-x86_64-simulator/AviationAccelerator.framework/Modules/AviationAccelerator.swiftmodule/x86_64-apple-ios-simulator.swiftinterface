// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AviationAccelerator
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AviationAccelerator
import Foundation
import LivingMapSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public class MapDesignator {
  public init(airportIataCode: Swift.String, terminalCode: Swift.String)
  @objc deinit
}
public struct FlightRegistrationData : Swift.Codable {
  public init(callingAirline: Swift.String, callingApplication: Swift.String, inboundFlightDate: Foundation.Date, inboundFlightNumber: Swift.String, outboundFlightDate: Foundation.Date, outboundFlightNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class LMAAConfig {
  public init(mapDesignator: AviationAccelerator.MapDesignator, mapSize: CoreFoundation.CGRect? = nil, viewController: UIKit.UIViewController? = nil, authenticationParameters: LivingMapSDK.AuthenticationParameters, flightRegistrationData: AviationAccelerator.FlightRegistrationData, customParameters: Foundation.NSDictionary, gateInitialisedLocation: Swift.Bool? = false, loggingEnabled: Swift.Bool? = false, simulationFilePath: Foundation.URL?)
  public class Builder {
    public init()
    public init(_ lmaaConfig: AviationAccelerator.LMAAConfig?)
    public func simulationFilePath(_ simulationFilePath: Foundation.URL?) -> AviationAccelerator.LMAAConfig.Builder
    public func mapDesignator(_ mapDesignator: AviationAccelerator.MapDesignator) -> AviationAccelerator.LMAAConfig.Builder
    public func mapSize(_ mapSize: CoreFoundation.CGRect) -> AviationAccelerator.LMAAConfig.Builder
    public func viewController(_ viewController: UIKit.UIViewController) -> AviationAccelerator.LMAAConfig.Builder
    public func authenticationParameters(_ authenticationParameters: LivingMapSDK.AuthenticationParameters) -> AviationAccelerator.LMAAConfig.Builder
    public func flightRegistrationData(_ flightRegistrationData: AviationAccelerator.FlightRegistrationData) -> AviationAccelerator.LMAAConfig.Builder
    public func customParameters(_ customParameters: Foundation.NSDictionary) -> AviationAccelerator.LMAAConfig.Builder
    public func gateInitialisedLocation(_ gateInitialisedLocation: Swift.Bool) -> AviationAccelerator.LMAAConfig.Builder
    public func loggingEnabled(_ loggingEnabled: Swift.Bool) -> AviationAccelerator.LMAAConfig.Builder
    public func build() throws -> AviationAccelerator.LMAAConfig
    @objc deinit
  }
  @objc deinit
}
public struct FlightParameters : Swift.Codable {
  public init(callingAirline: Swift.String, callingApplication: Swift.String, inboundFlightDate: Swift.String, inboundFlightNumber: Swift.String, outboundFlightDate: Swift.String, outboundFlightNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class LMAAManager {
  public init()
  public func start(eventHandler: any LivingMapSDK.LivingMapMappingEvents, lmaaConfig: AviationAccelerator.LMAAConfig) throws
  public func stop()
  public static func getVersion() -> Swift.String
  @objc deinit
}

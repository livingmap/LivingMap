// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AviationAccelerator
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AviationAccelerator
import Foundation
import LivingMapSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public class MapDesignator {
  public init(airportIataCode: Swift.String, terminalCode: Swift.String)
  @objc deinit
}
public struct Parameters : Swift.Codable {
  public init(callingAirline: Swift.String, callingApplication: Swift.String, inboundFlightDate: Swift.String, inboundFlightNumber: Swift.String, outboundFlightDate: Swift.String, outboundFlightNumber: Swift.String, project: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AviationAcceleratorState : Swift.String, Swift.CaseIterable {
  case online
  case flightUpdatesOnly
  case manualGateSelection
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AviationAccelerator.AviationAcceleratorState]
  public typealias RawValue = Swift.String
  public static var allCases: [AviationAccelerator.AviationAcceleratorState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct AAConstants {
  public static let EXTRAS_DCI_AVAILABLE_KEY: Swift.String
  public static let EXTRAS_JOURNEY_KEY: Swift.String
  public static let EXTRAS_ECCENABLED_KEY: Swift.String
}
public struct FlightRegistrationData : Swift.Codable {
  public init(callingAirline: Swift.String, callingApplication: Swift.String, inboundFlightDate: Foundation.Date, inboundFlightNumber: Swift.String, outboundFlightDate: Foundation.Date, outboundFlightNumber: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FlightRegistrationDataV2 : Swift.Codable {
  public init(project: Swift.String, registrationConfig: [AviationAccelerator.FlightParameters])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol FlightRegistrationHandler {
  func flightRegistered(registration: AviationAccelerator.RegistrationResponse)
  func flightRegistrationError(error: LivingMapSDK.LivingMapError)
}
@_hasMissingDesignatedInitializers public class RegistrationResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class LMAAConfig {
  public init(mapDesignator: AviationAccelerator.MapDesignator, mapSize: CoreFoundation.CGRect? = nil, viewController: UIKit.UIViewController? = nil, authenticationParameters: LivingMapSDK.AuthenticationParameters, flightRegistrationData: AviationAccelerator.FlightRegistrationData, customParameters: Foundation.NSDictionary, gateInitialisedLocation: Swift.Bool? = false, loggingEnabled: Swift.Bool? = false)
  public class Builder {
    public init()
    public init(_ lmaaConfig: AviationAccelerator.LMAAConfig?)
    public func mapDesignator(_ mapDesignator: AviationAccelerator.MapDesignator) -> AviationAccelerator.LMAAConfig.Builder
    public func mapSize(_ mapSize: CoreFoundation.CGRect) -> AviationAccelerator.LMAAConfig.Builder
    public func viewController(_ viewController: UIKit.UIViewController) -> AviationAccelerator.LMAAConfig.Builder
    public func authenticationParameters(_ authenticationParameters: LivingMapSDK.AuthenticationParameters) -> AviationAccelerator.LMAAConfig.Builder
    public func flightRegistrationData(_ flightRegistrationData: AviationAccelerator.FlightRegistrationData) -> AviationAccelerator.LMAAConfig.Builder
    public func customParameters(_ customParameters: Foundation.NSDictionary) -> AviationAccelerator.LMAAConfig.Builder
    public func gateInitialisedLocation(_ gateInitialisedLocation: Swift.Bool) -> AviationAccelerator.LMAAConfig.Builder
    public func loggingEnabled(_ loggingEnabled: Swift.Bool) -> AviationAccelerator.LMAAConfig.Builder
    public func build() throws -> AviationAccelerator.LMAAConfig
    @objc deinit
  }
  @objc deinit
}
public struct FlightParameters : Swift.Codable {
  public init(callingAirline: Swift.String, callingApplication: Swift.String, inboundFlightDate: Swift.String, inboundFlightNumber: Swift.String, outboundFlightDate: Swift.String, outboundFlightNumber: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class LMAAManager {
  public init()
  public func start(eventHandler: LivingMapSDK.LivingMapMappingEvents, lmaaConfig: AviationAccelerator.LMAAConfig) throws
  public func stop()
  public func createOfflineCache(lmaaConfig: AviationAccelerator.LMAAConfig, cacheProgressHandler: LivingMapSDK.OfflineCacheCallback)
  public func clearOfflineCache(lmaaConfig: AviationAccelerator.LMAAConfig, cacheProgressHandler: LivingMapSDK.OfflineCacheCallback)
  public static func getVersion() -> Swift.String
  @objc deinit
}
extension AviationAccelerator.AviationAcceleratorState : Swift.Equatable {}
extension AviationAccelerator.AviationAcceleratorState : Swift.Hashable {}
extension AviationAccelerator.AviationAcceleratorState : Swift.RawRepresentable {}
